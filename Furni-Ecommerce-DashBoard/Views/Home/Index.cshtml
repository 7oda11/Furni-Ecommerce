@model Furni_Ecommerce_Shared.AdminViewModel.DashboardViewModel

@{
    ViewData["Title"] = "DashBoard";
}

<div class="page-header">
    <h3 class="page-title">
        <span class="page-title-icon bg-gradient-primary text-white me-2">
            <i class="mdi mdi-home"></i>
        </span> Dashboard
    </h3>
    <nav aria-label="breadcrumb">
        <ul class="breadcrumb">
            <li class="breadcrumb-item active" aria-current="page">
                <span></span>Overview <i class="mdi mdi-alert-circle-outline icon-sm text-primary align-middle"></i>
            </li>
        </ul>
    </nav>
</div>
<div class="row">
    <div class="col-md-4 stretch-card grid-margin">
        <div class="card bg-gradient-danger card-img-holder text-white">
            <div class="card-body">
                <img src="~/assets/images/dashboard/circle.svg" class="card-img-absolute" alt="circle-image" />
                <h4 class="font-weight-normal mb-3">
                    Total Revenue <i class="mdi mdi-currency-usd mdi-24px float-end"></i>
                </h4>
                <h2 class="mb-5">@Model.TotalRevenue.ToString("C")</h2>
            </div>
        </div>
    </div>
    <div class="col-md-4 stretch-card grid-margin">
        <div class="card bg-gradient-info card-img-holder text-white">
            <div class="card-body">
                <img src="~/assets/images/dashboard/circle.svg" class="card-img-absolute" alt="circle-image" />
                <h4 class="font-weight-normal mb-3">
                    Total Orders <i class="mdi mdi-cart mdi-24px float-end"></i>
                </h4>
                <h2 class="mb-5">@Model.TotalOrders</h2>
                <a asp-controller="Orders" asp-action="Index" class="text-white">View Details</a>
            </div>
        </div>
    </div>
    <div class="col-md-4 stretch-card grid-margin">
        <div class="card bg-gradient-success card-img-holder text-white">
            <div class="card-body">
                <img src="~/assets/images/dashboard/circle.svg" class="card-img-absolute" alt="circle-image" />
                <h4 class="font-weight-normal mb-3">
                    Registered Users <i class="mdi mdi-account-multiple mdi-24px float-end"></i>
                </h4>
                <h2 class="mb-5">@Model.TotalUsers</h2>
                <a asp-controller="User" asp-action="Index" class="text-white">View Details</a>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-7 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <div class="clearfix">
                    <h4 class="card-title float-start">Monthly Top Products</h4>
                </div>
                <canvas id="monthlyProductsChart" class="mt-4"></canvas>
            </div>
        </div>
    </div>
    <div class="col-md-5 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Top Selling Products</h4>
                <div class="doughnutjs-wrapper d-flex justify-content-center">
                    <canvas id="topProductsChart"></canvas>
                </div>
                <div id="traffic-chart-legend" class="rounded-legend legend-vertical legend-bottom-left pt-4"></div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(function() {
            // Monthly Top Products Chart (Bar Chart)
            if ($("#monthlyProductsChart").length) {
                var ctx = document.getElementById("monthlyProductsChart").getContext("2d");

                var months = @Html.Raw(Json.Serialize(Model.MonthlyTopProducts.Keys));
                var productsData = @Html.Raw(Json.Serialize(Model.MonthlyTopProducts.Values));

                // Get unique product names across all months
                var allProducts = [];
                productsData.forEach(monthProducts => {
                    monthProducts.forEach(product => {
                        if (!allProducts.some(p => p.productId === product.productId)) {
                            allProducts.push({
                                productId: product.productId,
                                productName: product.productName
                            });
                        }
                    });
                });

                // Prepare datasets for each product
                var datasets = allProducts.map(product => {
                    var productData = months.map((month, index) => {
                        var monthProducts = productsData[index];
                        var foundProduct = monthProducts.find(p => p.productId === product.productId);
                        return foundProduct ? foundProduct.salesCount : 0;
                    });

                    return {
                        label: product.productName,
                        data: productData,
                        backgroundColor: getRandomColor(),
                        borderColor: getRandomColor(),
                        borderWidth: 1
                    };
                });

                var monthlyChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: months,
                        datasets: datasets
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                stacked: true,
                            },
                            y: {
                                stacked: true,
                                beginAtZero: true
                            }
                        },
                        plugins: {
                            title: {
                                display: true,
                                text: 'Top Selling Products by Month'
                            },
                            tooltip: {
                                callbacks: {
                                    afterBody: function(context) {
                                        var dataIndex = context[0].dataIndex;
                                        var productIndex = context[0].datasetIndex;
                                        var productId = allProducts[productIndex].productId;
                                        var monthProducts = productsData[dataIndex];
                                        var product = monthProducts.find(p => p.productId === productId);

                                        if (product) {
                                            return [
                                                `Revenue: $${product.totalRevenue.toFixed(2)}`,
                                                `Product ID: ${product.productId}`
                                            ];
                                        }
                                        return '';
                                    }
                                }
                            }
                        }
                    }
                });
            }

            // Top Selling Products Chart (Doughnut Chart)
            if ($("#topProductsChart").length) {
                var ctx = document.getElementById("topProductsChart").getContext("2d");

                var topProducts = @Html.Raw(Json.Serialize(Model.TopProducts));
                var labels = topProducts.map(p => p.productName);
                var data = topProducts.map(p => p.salesCount);
                var revenues = topProducts.map(p => p.totalRevenue);
                var backgroundColors = [
                    'rgba(75, 73, 172, 0.7)',
                    'rgba(255, 193, 0, 0.7)',
                    'rgba(243, 85, 142, 0.7)',
                    'rgba(0, 172, 193, 0.7)',
                    'rgba(153, 102, 255, 0.7)'
                ];

                var topProductsChart = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: labels,
                        datasets: [{
                            data: data,
                            backgroundColor: backgroundColors,
                            borderColor: [
                                'rgba(75, 73, 172, 1)',
                                'rgba(255, 193, 0, 1)',
                                'rgba(243, 85, 142, 1)',
                                'rgba(0, 172, 193, 1)',
                                'rgba(153, 102, 255, 1)'
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'bottom',
                            },
                            tooltip: {
                                callbacks: {
                                    afterBody: function(context) {
                                        var index = context[0].dataIndex;
                                        return [
                                            `Revenue: $${revenues[index].toFixed(2)}`,
                                            `Product ID: ${topProducts[index].productId}`
                                        ];
                                    }
                                }
                            }
                        },
                        cutout: '70%',
                        animation: {
                            animateScale: true,
                            animateRotate: true
                        }
                    }
                });
            }

            function getRandomColor() {
                var letters = '0123456789ABCDEF';
                var color = '#';
                for (var i = 0; i < 6; i++) {
                    color += letters[Math.floor(Math.random() * 16)];
                }
                return color;
            }
        });
    </script>
}