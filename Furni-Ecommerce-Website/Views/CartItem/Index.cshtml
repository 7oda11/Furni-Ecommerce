@model List<Furni_Ecommerce_Shared.UserViewModel.CartItemViewModel>

@{
    ViewData["Title"] = "Cart";
}


    <style>
        #generate-coupon {
            display: none;
        }
        /* Style to ensure apply-coupon button maintains style when disabled */
        #apply-coupon:disabled {
            opacity: 0.65;
            cursor: not-allowed;
        }
    </style>


  

    <div class="untree_co-section before-footer-section">
        <div class="container">
            <div class="row mb-5">
                <!-- Form starts here, sending data to /Checkout -->
                <form class="col-md-12" method="get" asp-controller="checkout" asp-action="Index">
                @Html.AntiForgeryToken()
                    <div class="site-blocks-table">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th class="product-thumbnail">Image</th>
                                    <th class="product-name">Product</th>
                                    <th class="product-price">Price</th>
                                    <th class="product-quantity">Quantity</th>
                                    <th class="product-total">Total</th>
                                    <th class="product-remove">Remove</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model)
                                {
                                    <tr data-stock="@item.AvailableQuantity">
                                        <td class="product-thumbnail">
                                            <img src="~/images/@item.ImagePath" class="img-fluid" style="max-width: 80px;" />
                                        </td>
                                        <td class="product-name">
                                            <h2 class="h5 text-black">@item.ProductName</h2>
                                        </td>
                                        <td class="product-price">@item.UnitPrice.ToString("0.00")</td>
                                        <td>
                                            <div class="input-group mb-3 d-flex align-items-center quantity-container" style="max-width: 120px;">
                                                <div class="input-group-prepend">
                                                    <button class="btn btn-outline-black decrease" type="button">&minus;</button>
                                                </div>
                                                <input type="text" class="form-control text-center quantity" value="@item.Quantity" readonly>
                                                <div class="input-group-append">
                                                    <button class="btn btn-outline-black increase" type="button">&plus;</button>
                                                </div>
                                            </div>
                                        </td>
                                        <td class="product-total">@((item.UnitPrice * 0).ToString("0.00"))</td>
                                        <td><a class="btn btn-black btn-sm remove" href="/CartItem/Delete/@item.CartItemId" onclick="return confirm('Are you sure?');">X</a></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <!-- Hidden input for Coupon Code -->
                    @* <input type="hidden" name="couponCode" id="couponCode" value="" /> *@
                    @* <input type="hidden" name="totalAmount" id="totalAmount" value="" /> *@
                    @* <input type="hidden" name="cartItems" id="cartItems" value="" /> *@
                    <div class="row">
                        <div class="col-md-6">
                            <div class="row mb-5">
                                @* <div class="col-md-6 mb-3"> *@
                                @*     <button class="btn btn-black btn-sm btn-block" id="update-cart">Update Cart</button> *@
                                @* </div> *@
                                <div class="col-md-6">
                                    <a href="/Shop" class="btn btn-outline-black btn-sm btn-block">Continue Shopping</a>
                                </div>
                            </div>
                            @* <div class="row"> *@
                            @*     <div class="col-md-12"> *@
                            @*         <label class="text-black h4" for="coupon">Coupon</label> *@
                            @*         <p>Enter your coupon code if you have one.</p> *@
                            @*     </div> *@
                            @*     <div class="col-md-8 mb-3 mb-md-0"> *@
                            @*         <input type="text" class="form-control py-3" id="coupon" placeholder="Coupon Code"> *@
                            @*     </div> *@
                            @*     <div class="col-md-4"> *@
                            @*         <button class="btn btn-black" id="apply-coupon" disabled>Apply Coupon</button> *@
                            @*     </div> *@
                            @* </div> *@
                        </div>
                        <div class="col-md-6 pl-5">
                            <div class="row justify-content-end">
                                <div class="col-md-7">
                                    <h3 class="text-black h4 text-uppercase">Cart Totals</h3>
                                    <div class="row mb-3">
                                        <div class="col-md-6"><span class="text-black">Subtotal</span></div>
                                        <div class="col-md-6 text-right"><strong class="text-black" id="subtotal">$0.00</strong></div>
                                    </div>
                                    <div class="row mb-5">
                                        <div class="col-md-6"><span class="text-black">Total</span></div>
                                        <div class="col-md-6 text-right"><strong class="text-black" id="total">$0.00</strong></div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-12">
                                            <button class="btn btn-black btn-lg py-3 btn-block" type="submit">Proceed To Checkout</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        // Updates the subtotal and total after each action
        function updateTotals() {
            let subtotal = 0;
            let total = 0;

            document.querySelectorAll("tbody tr").forEach(row => {
                const price = parseFloat(row.querySelector(".product-price").textContent);
                const qtyInput = row.querySelector(".quantity");
                const qty = parseInt(qtyInput.value);
                const totalRow = price * qty;
                row.querySelector(".product-total").textContent = totalRow.toFixed(2);
                subtotal += totalRow;
            });

            total = subtotal;
            document.getElementById("subtotal").textContent = `$${subtotal.toFixed(2)}`;
            document.getElementById("total").textContent = `$${total.toFixed(2)}`;
            // toggleCouponButton(total);
            // checkCouponEligibility(total);
        }

        // Checks if the coupon button should be enabled based on the cart total
        function checkCouponEligibility(total) {
            const applyCouponButton = document.getElementById("apply-coupon");
            const couponInput = document.getElementById("coupon");

            // Enable or disable the coupon based on the total amount
            if (total >= 10000 && couponInput.value.trim() !== '') {
                applyCouponButton.disabled = false;
            } else {
                applyCouponButton.disabled = true;
            }
        }

        // Controls the display and functionality of the coupon generation
              function toggleCouponButton(total) {
            const couponButton = document.getElementById("generate-coupon");

            if (total >= 10000 && total < 15000) {
                couponButton.style.display = "block";
                couponButton.dataset.discount = "10";
                couponButton.textContent = "Generate 10% Coupon";
            } else if (total >= 15000 && total < 20000) {
                couponButton.style.display = "block";
                couponButton.dataset.discount = "15";
                couponButton.textContent = "Generate 15% Coupon";
            } else if (total >= 20000) {
                couponButton.style.display = "block";
                couponButton.dataset.discount = "20";
                couponButton.textContent = "Generate 20% Coupon";
            } else {
                couponButton.style.display = "none";
            }
        }


        // Generate coupon and set it in the input field
        function generateCoupon() {
            const discount = document.getElementById("generate-coupon").dataset.discount;
            const couponCode = Math.random().toString(36).substring(2, 8).toUpperCase();
            const couponInput = document.getElementById("coupon");
            couponInput.value = couponCode;
            alert(`Generated Coupon: ${couponCode} - ${discount}% off`);

            document.getElementById("apply-coupon").disabled = false;
        }

        // Apply the coupon and adjust the total price
               document.getElementById("apply-coupon").addEventListener("click", (e) => {
            e.preventDefault();
            const total = parseFloat(document.getElementById("total").textContent.replace('$', '').trim());
            const couponInput = document.getElementById("coupon").value;

            let discount = 0;
            if (total >= 10000) {
                if (total >= 10000 && total < 15000) {
                    discount = 10;
                } else if (total >= 15000 && total < 20000) {
                    discount = 15;
                } else if (total >= 20000) {
                    discount = 20;
                }
            }

            // Apply discount if valid coupon
            if (discount > 0 && couponInput) {
                const discountedTotal = total * (1 - discount / 100);
                document.getElementById("total").textContent = `$${discountedTotal.toFixed(2)}`;
                alert(`Coupon applied! New total: $${discountedTotal.toFixed(2)}`);
                document.getElementById("couponCode").value = couponInput;
            } else {
                alert("Invalid coupon or total is too low.");
            }
        });

            // Increase the quantity for an item
    document.querySelectorAll(".increase").forEach((button) => {
        button.addEventListener("click", function () {
            const row = this.closest("tr");
            const quantityInput = row.querySelector(".quantity");
            const currentQuantity = parseInt(quantityInput.value);
            const stock = parseInt(row.dataset.stock);
            const cartItemId = row.querySelector(".remove").getAttribute("href").split('/').pop();
            console.log(cartItemId);

            if (currentQuantity < stock) {
                quantityInput.value = currentQuantity + 1;
                updateQuantityInDatabase(cartItemId, currentQuantity + 1);
                updateTotals();
            } else {
                alert("Cannot increase quantity beyond available stock.");
            }
        });
    });

    // Decrease the quantity for an item
    document.querySelectorAll(".decrease").forEach((button) => {
        button.addEventListener("click", function () {
            const row = this.closest("tr");
            const quantityInput = row.querySelector(".quantity");
            const currentQuantity = parseInt(quantityInput.value);
            const cartItemId = row.querySelector(".remove").getAttribute("href").split('/').pop();

            if (currentQuantity > 1) {
                quantityInput.value = currentQuantity - 1;
                updateQuantityInDatabase(cartItemId, currentQuantity - 1);
                updateTotals();
            }
        });
    });

       // Function to update quantity in database via AJAX
     // Function to update quantity in database via AJAX
        function updateQuantityInDatabase(cartItemId, newQuantity) {
        const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
        const token = tokenElement ? tokenElement.value : '';

        const row = document.querySelector(`tr a[href="/CartItem/Delete/${cartItemId}"]`)?.closest('tr');
        if (!row) {
            console.error('Could not find cart item row');
            alert('Could not find item in cart');
            return;
        }

        const quantityInput = row.querySelector('.quantity');
        quantityInput.disabled = true;

        // Make sure the fetch URL matches the route defined in your controller
        fetch(`/CartItem/UpdateQuantity/${cartItemId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': token
            },
            body: JSON.stringify({
                Quantity: newQuantity
            })
        })
        .then(async response => {
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                const errorMsg = errorData.message ||
                                (response.status === 404 ? 'Cart item not found' :
                                 response.status === 400 ? 'Invalid request' :
                                 'Failed to update quantity');
                throw new Error(errorMsg);
            }
            return response.json();
        })
        .then(data => {
            row.querySelector('.product-total').textContent = data.itemTotal;
            updateTotals();
        })
        .catch(error => {
            console.error('Error:', error);
            alert(error.message);
            quantityInput.value = parseInt(quantityInput.value); // Revert to original value
        })
        .finally(() => {
            quantityInput.disabled = false;
        });
    }

        // Listen for quantity input changes and update totals
        document.querySelectorAll(".quantity").forEach((input) => {
            input.addEventListener("change", function () {
                const quantityInput = this;
                const row = quantityInput.closest("tr");
                const stock = parseInt(row.dataset.stock);

                let quantity = parseInt(quantityInput.value);
                if (quantity > stock) {
                    alert(`Cannot select more than ${stock} items.`);
                    quantityInput.value = stock;
                }
                updateTotals();  // Recalculate totals after input change
            });
        });

        // Call update totals when the page loads
        window.addEventListener('DOMContentLoaded', updateTotals);
    </script>



